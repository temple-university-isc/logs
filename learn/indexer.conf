#--------------------
# Filters
#--------------------
filter {
  #--------------------
  # Tomcat Access  
  #--------------------
  # pattern="%a %{forwarding-ip-address}r %{thread-name}r %{user-pk1}r %t &quot;%r&quot; %s %b &quot;%{User-Agent}i&quot; %{session_id}c %T %D %b"
  grok {
    type => "apache-access"
    match => [ "@message", "%{IP:src_ip} - %{USERNAME:thread_name} %{DATA:suid} \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:status_code} (?<bytes>[\d-]+) %{QS:http_useragent} (?<session_id>(-|%{WORD})) %{NUMBER:time_served_s} %{NUMBER:time_served_ms} [\w\d\\-]+\s*$" ]
  }
  # remove noise in apache-access
  grep {
    negate => true
    match => [ "message", "Xythos Admin Client (7.2.119.2057)" ]
    drop => true
  }

  #--------------------
  # Tomcat stdout-stderr
  #--------------------
  multiline {
    type => "tomcat-std"
    pattern => "^(.*\|){3}\s((?!Caused by)[^\s]).*"
    negate => true
    what => "previous"
  }

  #--------------------
  # Tomcat Catalina
  #--------------------
  multiline {
    type => "catalina"
    pattern => "^(SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST|WARN|ERROR)(.)*"
    negate => true
    what => "previous"
  }

  #--------------------
  # Blackboard Services
  #--------------------
  multiline {
    type => "bb-services"
    pattern => "^20(.)*"
    negate => true
    what => "previous"
  }

  #--------------------
  # Blackboard Security Central
  #--------------------
  grok {
    type => "security-central"
    match => ["@message", "timestamp=(?<timestamp>%{MONTH} %{MONTHDAY} %{YEAR} %{HOUR}:%{MINUTE}:%{SECOND} %{TZ})\|app_vend=%{WORD:app_vend}\|app_name=%{WORD:app_name}\|app_ver=(?<app_ver>[0-9\.]+)\|evt_code=%{NUMBER:evt_code}\|evt_name=(?<evt_name>[\w\d\s]+)\|sev=%{NUMBER:sev}\|cat=(?<cat>[\w\d\s]+)\|outcome=%{WORD:outcome}\|dhost=%{HOST:dhost}\|src_ip=%{IP:src_ip}\|suid=(?<suid>(\s*|%{USERNAME}))\|suser=(?<suser>(\s*|%{USERNAME}))\|session_id=(?<session_id>(\s*|%{WORD}|%{NUMBER}))\|msg=%{DATA:msg}\|http_useragent=%{DATA:http_useragent}\|act=%{WORD:act}\|request=%{URIPATH:request}\s*$" ]
  }

  grok {
    type => "security-central"
    match => ["@message", "timestamp=(?<timestamp>%{MONTH} %{MONTHDAY} %{YEAR} %{HOUR}:%{MINUTE}:%{SECOND} %{TZ})\|app_vend=%{WORD:app_vend}\|app_name=%{WORD:app_name}\|app_ver=(?<app_ver>[0-9\.]+)\|evt_code=%{NUMBER:evt_code}\|evt_name=(?<evt_name>[\w\d\s]+)\|sev=%{NUMBER:sev}\|cat=(?<cat>[\w\d\s]+)\|outcome=%{WORD:outcome}\|dhost=%{HOST:dhost}\|src_ip=%{IP:src_ip}\|suid=(?<suid>(\s*|%{USERNAME}))\|suser=(?<suser>(\s*|%{USERNAME}))\|session_id=(?<session_id>(\s*|%{WORD}|%{NUMBER}))\|msg=%{DATA:msg}\|http_useragent=%{DATA:http_useragent}\|act=%{WORD:act}\|request=%{URIPATH:request}\|requestparam=(?<requestparam>(\s*|%{DATA}))\|requestval=(?<requestval>(\s*%{DATA}))$" ]
  }

  #--------------------
  # Blackboard Security Input Validation
  #--------------------
  grok {
	type => "security-validation"
    match => [ "@message", "timestamp=(?<timestamp>%{MONTH} %{MONTHDAY} %{YEAR} %{HOUR}:%{MINUTE}:%{SECOND} %{TZ})\|app_vend=%{WORD:app_vend}\|app_name=%{WORD:app_name}\|app_ver=(?<app_ver>[0-9\.]+)\|evt_code=%{NUMBER:evt_code}\|evt_name=(?<evt_name>[\w\d\s]+)\|sev=%{NUMBER:sev}\|cat=(?<cat>[\w\d\s]+)\|outcome=%{WORD:outcome}\|dhost=%{HOST:dhost}\|src_ip=%{IP:src_ip}\|suid=(?<suid>(\s*|%{USERNAME}))\|suser=(?<suser>(\s*|%{USERNAME}))\|session_id=(?<session_id>(\s*|%{WORD}|%{NUMBER}))\|msg=%{DATA:msg}\|http_useragent=(?<http_useragent>(\s*|%{DATA}))\|act=(?<act>(\s*|%{WORD}))\|request=(?<request>(\s*|%{URIPATH}))\|rpath=(?<rpath>(\s*|%{URIPATH}))\|rparam=(?<rparam>(\s*|%{DATA}))\|cs=(?<cs>(\s*|%{DATA}))\|csn=(?<csn>(\s*|%{DATA}))\|requestval=(?<requestval>(\s*|%{DATA}))\|cleanval=(?<cleanval>(\s*|%{DATA}))\s*$" ]
  }

  #--------------------
  # Blackboard Security Authentication
  #--------------------
  grok {
    type => "security-authentication"
    match => [ "@message", "timestamp=(?<timestamp>%{MONTH} %{MONTHDAY} %{YEAR} %{HOUR}:%{MINUTE}:%{SECOND} %{TZ})\|app_vend=%{WORD:app_vend}\|app_name=%{WORD:app_name}\|app_ver=(?<app_ver>[0-9\.]+)\|evt_code=%{NUMBER:evt_code}\|evt_name=(?<evt_name>[\w\d\s]+)\|sev=%{NUMBER:sev}\|cat=(?<cat>[\w\d\s]+)\|authnprovider=(?<authnprovider>(\s*|%{USERNAME}))\|dhost=(?<dhost>(\s*|%{HOST}))\|outcome=%{WORD:outcome}\|src_ip=(?<src_ip>(\s*|%{IP}))\|duid=(?<duid>(\s*|%{USERNAME}))\|duser=(?<duser>(\s*|%{USERNAME}))\|text=%{DATA:msg}\|authnmethod=(?<authnmethod>[\w\d\s-]+)\|http_useragent=%{DATA:http_useragent}$" ]
  }
}

input {
  redis {
    host => "{{logstash__redis_input_host}}"
    type => "redis-input"
    data_type => "list"
    key => "logstash"
    threads => {{logstash__redis_input_threads}}
  }
}

output {
  elasticsearch {
    host => "{{elasticsearch__host}}"
    port => "{{elasticsearch__port}}"
    protocol => http
    manage_template => true
    template_name => "bblearn"
    template => "/usr/local/logstash/elasticsearch_template_bblearn.json"
    template_overwrite => true
    workers => {{logstash__elasticsearch_output_threads}}
  }
}

